//
//  APIMock.swift
//  HackerNews
//
//  Created by Anton Kaliuzhnyi on 12.05.2021.
//

import Foundation

class APIMock: APIType {
    
    class var randomItem: Item {
        Item(
            by: "anonymous",
            descendants: 10,
            id: 27127316,
            kids: [27128053, 27128112, 27127945, 27127913, 27128097, 27128082, 27128084, 27128062],
            score: 47,
            text: "The text",
            time: 1620800894,
            title: "The story title",
            type: "story",
            url: "https://news.ycombinator.com/"
        )
    }
    
    func item(id: Int, _ completion: @escaping (Result<Item, Error>) -> Void) {
        completion(.success(Self.randomItem))
    }
    
    func topStories(_ completion: @escaping (Result<[Int], Error>) -> Void) {
        let ids = [
            27130355, 27129858, 27128994, 27129305, 27129518, 27128424, 27128531,
            27128869, 27128803, 27118965, 27129275, 27128765, 27126092, 27130275,
            27128831, 27128603, 27114562, 27129927, 27126939, 27127403, 27128425,
            27130281, 27125742, 27127703, 27117142, 27127316, 27125916, 27125847,
            27116599, 27129451, 27119351, 27115450, 27127694, 27124852, 27121332,
            27115009, 27128164, 27125728, 27130396, 27121918, 27128283, 27118794,
            27114740, 27124671, 27129864, 27114927, 27129961, 27114369, 27129943,
            27123410, 27130272, 27116246, 27127887, 27112573, 27120677, 27126258,
            27124584, 27115537, 27123389, 27127997, 27115116, 27114515, 27127139,
            27127994, 27112960, 27116203, 27123077, 27118541, 27121461, 27130291
        ]
        completion(.success(ids))
    }
    
    func newStories(_ completion: @escaping (Result<[Int], Error>) -> Void) {
        let ids = [
            27130874, 27130871, 27130869, 27130859, 27130855, 27130845, 27130841,
            27130838, 27130833, 27130830, 27130827, 27130806, 27130790, 27130786,
            27130776, 27130774, 27130767, 27130765, 27130754, 27130748, 27130720,
            27130708, 27130701, 27130691, 27130686, 27130684, 27130675, 27130647,
            27130636, 27130634, 27130631, 27130623, 27130615, 27130612, 27130610,
            27130595, 27130589, 27130578, 27130572, 27130568, 27130553, 27130550,
            27130536, 27130514, 27130508, 27130499, 27130493, 27130485, 27130477,
            27130474, 27130464, 27130458, 27130453, 27130418, 27130405, 27130399,
            27130396, 27130388, 27130376, 27130375, 27130355, 27130334, 27130319,
            27130318, 27130297, 27130291, 27130281, 27130275, 27130272, 27130264
        ]
        completion(.success(ids))
    }
    
    func bestStories(_ completion: @escaping (Result<[Int], Error>) -> Void) {
        let ids = [
            27100299, 27061789, 27082522, 27099536, 27084995, 27063894, 27112960,
            27114718, 27121332, 27095558, 27101092, 27071982, 27115809, 27086582,
            27106055, 27121918, 27086290, 27065738, 27121461, 27077806, 27071432,
            27075245, 27085922, 27071104, 27074481, 27120460, 27109142, 27109960,
            27081557, 27088884, 27075180, 27113222, 27106448, 27121586, 27126092,
            27068551, 27072515, 27112529, 27099969, 27116203, 27104271, 27097680,
            27087469, 27062650, 27112699, 27094179, 27086701, 27123553, 27085952,
            27120677, 27101808, 27097590, 27078524, 27110493, 27112573, 27083806,
            27096799, 27108593, 27124671, 27128424, 27100611, 27123410, 27103230,
            27077660, 27086553, 27092466, 27113667, 27064800, 27123389, 27111466
        ]
        completion(.success(ids))
    }
    
    func user(id: String, _ completion: @escaping (Result<User, Error>) -> Void) {
        let user = User(
            about: "This is a description of user",
            created: 1173923446,
            id: "username",
            karma: 1234,
            submitted: [
                25172559, 25172553, 19464269, 18498213, 16659709, 16659632, 16659556,
                14237416, 11871616, 11483492, 11435082, 10985073, 10985027, 10984914,
                10977351, 10969209, 10959149, 10918078, 10917848, 10897434, 10897419,
                10897400, 10897365, 10868971, 10789678, 10784059, 10771938, 10756942,
                10756938, 10756363, 10756187, 10755845, 10755835, 10755110, 10754784,
                10754725, 10754649, 10749883, 10748263, 10748225, 10603008, 10603006,
                10602989, 10488665, 10462014, 10459072, 10459039, 10459015, 10458960,
                10389721, 10389705, 10389701, 10389693, 10389610, 10388321, 10384739,
                10335836, 10324863, 10324857, 10324848, 10324844, 10324800, 10267145,
                10216820, 10138032, 10138023, 10138017, 10138015, 10138006, 10138003
            ]
        )
        completion(.success(user))
    }
    
}
